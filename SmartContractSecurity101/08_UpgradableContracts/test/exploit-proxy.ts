import { time, loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { ethers } from "hardhat";


describe('TestUpgrage', () =>
{
  // We define a fixture to reuse the same setup in every test.
  // We use loadFixture to run this setup once, snapshot that state,
  // and reset Hardhat Network to that snapshopt in every test.
  async function deployUpgradesFixture()
  {
    const [deployer, user] = await ethers.getSigners();
    const LogicV1 = await ethers.getContractFactory(
      "ContractLogicV1",
      deployer
    );
    const logicV1 = await LogicV1.deploy();

    const Proxy = await ethers.getContractFactory("ProxyContract", deployer);
    const proxy = await Proxy.deploy(logicV1.address);

    const LogicV2 = await ethers.getContractFactory(
      "ContractLogicV2",
      deployer
    );
    const logicV2 = await LogicV2.deploy();

    const proxyPattern = await ethers.getContractAt(
      "ContractLogicV1",
      proxy.address
    );
    const proxyPattern2 = await ethers.getContractAt(
      "ContractLogicV2",
      proxy.address
    );

    return { logicV1, logicV2, proxyPattern, proxyPattern2, deployer, user, proxy };
  }


  describe("Deployment-Proxy", function ()
  {
    it("Should return the address of LogicV1 when calling logicContract()", async function ()
    {
      const { logicV1, proxy } = await loadFixture(deployUpgradesFixture);

      expect(await proxy.logicContract()).to.equal(logicV1.address);
    });

    it("Should return the address of LogicV1 when calling logicContract()", async function ()
    {
      const { logicV1, logicV2, proxy, user } = await loadFixture(deployUpgradesFixture);
      await expect(
        proxy.connect(user).upgrade(logicV2.address)
      ).to.be.revertedWith("Access restricted");

    });

    it("Should allow the owner to update the logic Contract", async function ()
    {
      const { logicV1, logicV2, proxy, user } = await loadFixture(deployUpgradesFixture);
      await proxy.upgrade(logicV2.address);
      expect(await proxy.logicContract()).to.eq(logicV2.address);
    });

    it("Calling increaseAge of should add to proxyV1 state", async function ()
    {
      const { logicV1, proxy, user, proxyPattern } = await loadFixture(deployUpgradesFixture);
      await proxyPattern.connect(user).increaseAge()
      expect(await proxy.age()).to.eq(1)
      expect(await logicV1.age()).to.eq(0)
    });

    it("Calling increaseAge of should add to proxyV2 state", async function ()
    {
      const { logicV1, proxy, logicV2, proxyPattern2 } = await loadFixture(deployUpgradesFixture);
      await proxy.upgrade(logicV2.address)
      await proxyPattern2.increaseAge()
      expect(await proxy.age()).to.eq(1)
      expect(await logicV1.age()).to.eq(0)
    });
  });
})