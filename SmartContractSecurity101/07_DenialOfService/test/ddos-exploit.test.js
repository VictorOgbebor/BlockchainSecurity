const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("DDOS Attacks", function () {
  let deployer, attacker, user;
  beforeEach(async function () {
    [deployer, attacker, user] = await ethers.getSigners();
    const AuctionContract = await ethers.getContractFactory(
      "Auction",
      deployer
    );
    this.auction = await AuctionContract.deploy();
    this.auction.bid({ value: 100 });

    const AuctionV2Contract = await ethers.getContractFactory(
      "AuctionV2",
      deployer
    );
    this.auctionV2 = await AuctionV2Contract.deploy();
    this.auctionV2.bid({ value: 100 });
  });

  describe("AuctionV1", () => {
    describe("When bid is lower than HighestBid", () => {
      it("Should not accept bids lower than current", async function () {
        await expect(
          this.auction.connect(user).bid({ value: 50 })
        ).to.be.revertedWith("Bid not high enough");
      });
    });
    describe("When bid is higher than HighestBid", () => {
      it("Should update the highest bidder", async function () {
        await this.auction.connect(user).bid({ value: 150 });
        expect(await this.auction.highestBid()).to.equal(150);
      });
      it("Should make msg.sender currentLeader", async function () {
        await this.auction.connect(user).bid({ value: 150 });
        expect(await this.auction.currentLeader()).to.equal(user.address);
      });
      it("Should move previous leader and highestBid to refunds", async function () {
        await this.auction.connect(user).bid({ value: 150 });
        [addr, amount] = await this.auction.refunds(0);
        expect(addr).to.equal(deployer.address);
        expect(amount).to.eq(100);
      });
    });
    describe("When calling withdrawAll()", () => {
      it("Should return the funds to non winners", async function () {
        await this.auction.connect(user).bid({ value: 150 });
        await this.auction.bid({ value: 200 });

        // balance before
        balanceBefore = await ethers.provider.getBalance(user.address);
        await this.auction.refundAll();
        // balance after
        balanceAfter = await ethers.provider.getBalance(user.address);

        expect(balanceAfter).to.eq(balanceBefore.add(150));
      });
      it("Should revert if amount of computation hits the block gas limit", async function () {
        for (let i = 0; i < 1500; i++) {
          await this.auction.connect(attacker).bid({ value: 150 + i });
        }
        await this.auction.refundAll();
        // expect => Transaction ran out of gas
      });
    });
  });

  describe("AuctionV2", () => {
    describe("Pull over Push fix", () => {
      it("user should be able to be refunded for a small number of bids", async function () {
        await this.auctionV2
          .connect(user)
          .bid({ value: ethers.utils.parseEther("1") });
        await this.auctionV2.bid({ value: ethers.utils.parseEther("2") });
        const userBalanceBefore = await ethers.provider.getBalance(
          user.address
        );
        await this.auctionV2.connect(user).withdrawRefund();
        const userBalanceAfter = await ethers.provider.getBalance(user.address);
        expect(userBalanceAfter).to.be.gt(userBalanceBefore);
      });
      it("user should be able to be refunded for a large number of bids", async function () {
        for (let i = 0; i < 1500; i++) {
          await this.auctionV2
            .connect(user)
            .bid({ value: ethers.utils.parseEther("0.0001") + i });
        }
        const userBalanceBefore = await ethers.provider.getBalance(
          user.address
        );
        await this.auctionV2.connect(user).withdrawRefund();
        const userBalanceAfter = await ethers.provider.getBalance(user.address);
        expect(userBalanceAfter).to.be.gt(userBalanceBefore);
      });
    });
  });
});
