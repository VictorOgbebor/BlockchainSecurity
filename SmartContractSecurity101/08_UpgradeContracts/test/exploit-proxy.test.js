const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("Upgradable Proxy Pattern", function () {
  let deployer, user;

  beforeEach(async function () {
    [deployer, user] = await ethers.getSigners();

    const LogicV1 = await ethers.getContractFactory(
      "ContractLogicV1",
      deployer
    );
    this.logicV1 = await LogicV1.deploy();

    const Proxy = await ethers.getContractFactory("ProxyContract", deployer);
    this.proxy = await Proxy.deploy(this.logicV1.address);

    const LogicV2 = await ethers.getContractFactory(
      "ContractLogicV2",
      deployer
    );
    this.logicV2 = await LogicV2.deploy();

    this.proxyPattern = await ethers.getContractAt(
      "ContractLogicV1",
      this.proxy.address
    );
    this.proxyPattern2 = await ethers.getContractAt(
      "ContractLogicV2",
      this.proxy.address
    );
  });

  describe("Proxy", function () {
    it("Should return the address of LogicV1 when calling logicContract()", async function () {
      expect(await this.proxy.logicContract()).to.eq(this.logicV1.address);
    });
    it("Should revert if anyone than the owner tries to upgrade", async function () {
      await expect(
        this.proxy.connect(user).upgrade(this.logicV2.address)
      ).to.be.revertedWith("Access restricted");
    });
    it("Should allow the owner to update the logic Contract", async function () {
      await this.proxy.upgrade(this.logicV2.address);
      expect(await this.proxy.logicContract()).to.eq(this.logicV2.address);
    });
    it("Calling increaseAge of should add to proxyV1 state", async function ()
    {
      await this.proxyPattern.connect(user).increaseAge()
      expect (await this.proxy.age()).to.eq(1)
      expect (await this.logicV1.age()).to.eq(0)
    });

    it("Calling increaseAge of should add to proxyV2 state", async function ()
    {
      await this.proxy.upgrade(this.logicV2.address)
      await this.proxyPattern2.increaseAge()
      expect (await this.proxy.age()).to.eq(1)
      expect (await this.logicV1.age()).to.eq(0)
    });
  });
});
